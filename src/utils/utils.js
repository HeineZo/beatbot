import * as path from 'path';
import * as fs from 'fs';
import url from 'url';


const __dirname = url.fileURLToPath(new URL('.', import.meta.url));

/**
 * RÃ©cupÃ©rer tous les fichiers d'un dossier
 * @param folder Dossier dont on veut rÃ©cupÃ©rer les fichiers
 * @returns Les fichiers du dossier
 */
export function retrieveFiles(folder) {
    // On rÃ©cupÃ¨re tous les fichiers .js dans le dossier spÃ©cifiÃ©
    const commandsPath = path.join('file://',__dirname, `../${folder}`);
    
    const files = fs.readdirSync(path.resolve(__dirname, `../${folder}`)).filter(file => file.endsWith('.js'));

    // On crÃ©e des chemins d'accÃ¨s pour chaque fichier
    const filesPath = [];
    for (const file of files) {
        const filePath = path.join(commandsPath, file);
        filesPath.push(filePath);
    }
    return filesPath;
}

/**
 * Attribue un emoji en fonction de sa place dans la liste
 * @param place Index de la liste
 * @returns Emoji correspondant
 */
export function determinePodium(place) {
    switch (place) {
        case 0:
            return 'ðŸ¥‡';
        case 1:
            return 'ðŸ¥ˆ';
        case 2:
            return 'ðŸ¥‰';
        default:
            return 'ðŸ‘»';
    }
}

/**
 * RÃ©cupÃ¨re les requÃªtes envoyÃ©es Ã  l'API Deezer
 * @param apiCall RequÃªte Ã  envoyer
 * @returns DonnÃ©es rÃ©cupÃ©res
 */
const retrieveData = async (apiCall) => {
    let value;
    await fetch(apiCall)
        .then((response) => response.json())
        .then((data) => (value = data));
    return value;
}

/**
 * RÃ©cupÃ¨re les informations d'un artiste
 * @param idArtist ID de l'artiste dont on veut rÃ©cupÃ©rer les informations
 * @returns Les informations de l'artiste
 */
export async function getArtist(idArtist) {
    return retrieveData(`https://api.deezer.com/artist/${idArtist}`);
}

/**
 * RÃ©cupÃ©rer les albums d'un artiste
 * @param idArtist ID de l'artiste
 * @param limit Limitation du nombre d'albums Ã  rÃ©cupÃ©rer
 * @returns Les albums de l'artiste
 */
export async function getAlbumFromArtist(idArtist, limit = -1) {
    let value;
    await fetch(`https://api.deezer.com/artist/${idArtist}/albums?limit=${limit}`)
        .then((response) => response.json())
        .then((data) => (value = data["data"]));
    return value;
}

/**
 * Envoi un DM Ã  une personne
 * @param bot Le bot qui envoi le message
 * @param userID ID de l'utilisateur qui reÃ§ois le message
 * @param message Contenu du message
 */
export function sendDM(bot, userID, message) {
    bot.users.fetch(userID).then((user) => {
        user.send(message);
    })
}

/**
 * Rajoute un s Ã  la fin d'un mot s'il doit Ãªtre au pluriel
 * @param word Mot Ã  conjuguer
 * @param number Chifffre avant le mot
 * @returns Le mot conjuguÃ©
 */
export function pluralize(word, number) {
    return number > 1 ? word + 's' : word;
}

